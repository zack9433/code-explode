{"ts":1359408905486,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#!/usr/bin/env node\r\n\r\nvar sys = require('sys'),\r\n    http = require('http'),\r\n    fs = require('fs'),\r\n    url = require('url'),\r\n    events = require('events');\r\n\r\nvar DEFAULT_PORT = 8000;\r\n\r\nfunction main(argv) {\r\n  new HttpServer({\r\n    'GET': createServlet(StaticServlet),\r\n    'HEAD': createServlet(StaticServlet)\r\n  }).start(Number(argv[2]) || DEFAULT_PORT);\r\n}\r\n\r\nfunction escapeHtml(value) {\r\n  return value.toString().\r\n    replace('<', '&lt;').\r\n    replace('>', '&gt;').\r\n    replace('\"', '&quot;');\r\n}\r\n\r\nfunction createServlet(Class) {\r\n  var servlet = new Class();\r\n  return servlet.handleRequest.bind(servlet);\r\n}\r\n\r\n/**\r\n * An Http server implementation that uses a map of methods to decide\r\n * action routing.\r\n *\r\n * @param {Object} Map of method => Handler function\r\n */\r\nfunction HttpServer(handlers) {\r\n  this.handlers = handlers;\r\n  this.server = http.createServer(this.handleRequest_.bind(this));\r\n}\r\n\r\nHttpServer.prototype.start = function(port) {\r\n  this.port = port;\r\n  this.server.listen(port);\r\n  sys.puts('Http Server running at http://localhost:' + port + '/');\r\n};\r\n\r\nHttpServer.prototype.parseUrl_ = function(urlString) {\r\n  var parsed = url.parse(urlString);\r\n  parsed.pathname = url.resolve('/', parsed.pathname);\r\n  return url.parse(url.format(parsed), true);\r\n};\r\n\r\nHttpServer.prototype.handleRequest_ = function(req, res) {\r\n  var logEntry = req.method + ' ' + req.url;\r\n  if (req.headers['user-agent']) {\r\n    logEntry += ' ' + req.headers['user-agent'];\r\n  }\r\n  sys.puts(logEntry);\r\n  req.url = this.parseUrl_(req.url);\r\n  var handler = this.handlers[req.method];\r\n  if (!handler) {\r\n    res.writeHead(501);\r\n    res.end();\r\n  } else {\r\n    handler.call(this, req, res);\r\n  }\r\n};\r\n\r\n/**\r\n * Handles static content.\r\n */\r\nfunction StaticServlet() {}\r\n\r\nStaticServlet.MimeMap = {\r\n  'txt': 'text/plain',\r\n  'html': 'text/html',\r\n  'css': 'text/css',\r\n  'xml': 'application/xml',\r\n  'json': 'application/json',\r\n  'js': 'application/javascript',\r\n  'jpg': 'image/jpeg',\r\n  'jpeg': 'image/jpeg',\r\n  'gif': 'image/gif',\r\n  'png': 'image/png'\r\n};\r\n\r\nStaticServlet.prototype.handleRequest = function(req, res) {\r\n  var self = this;\r\n  var path = ('./' + req.url.pathname).replace('//','/').replace(/%(..)/, function(match, hex){\r\n    return String.fromCharCode(parseInt(hex, 16));\r\n  });\r\n  var parts = path.split('/');\r\n  if (parts[parts.length-1].charAt(0) === '.')\r\n    return self.sendForbidden_(req, res, path);\r\n  fs.stat(path, function(err, stat) {\r\n    if (err)\r\n      return self.sendMissing_(req, res, path);\r\n    if (stat.isDirectory())\r\n      return self.sendDirectory_(req, res, path);\r\n    return self.sendFile_(req, res, path);\r\n  });\r\n}\r\n\r\nStaticServlet.prototype.sendError_ = function(req, res, error) {\r\n  res.writeHead(500, {\r\n      'Content-Type': 'text/html'\r\n  });\r\n  res.write('<!doctype html>\\n');\r\n  res.write('<title>Internal Server Error</title>\\n');\r\n  res.write('<h1>Internal Server Error</h1>');\r\n  res.write('<pre>' + escapeHtml(sys.inspect(error)) + '</pre>');\r\n  sys.puts('500 Internal Server Error');\r\n  sys.puts(sys.inspect(error));\r\n};\r\n\r\nStaticServlet.prototype.sendMissing_ = function(req, res, path) {\r\n  path = path.substring(1);\r\n  res.writeHead(404, {\r\n      'Content-Type': 'text/html'\r\n  });\r\n  res.write('<!doctype html>\\n');\r\n  res.write('<title>404 Not Found</title>\\n');\r\n  res.write('<h1>Not Found</h1>');\r\n  res.write(\r\n    '<p>The requested URL ' +\r\n    escapeHtml(path) +\r\n    ' was not found on this server.</p>'\r\n  );\r\n  res.end();\r\n  sys.puts('404 Not Found: ' + path);\r\n};\r\n\r\nStaticServlet.prototype.sendForbidden_ = function(req, res, path) {\r\n  path = path.substring(1);\r\n  res.writeHead(403, {\r\n      'Content-Type': 'text/html'\r\n  });\r\n  res.write('<!doctype html>\\n');\r\n  res.write('<title>403 Forbidden</title>\\n');\r\n  res.write('<h1>Forbidden</h1>');\r\n  res.write(\r\n    '<p>You do not have permission to access ' +\r\n    escapeHtml(path) + ' on this server.</p>'\r\n  );\r\n  res.end();\r\n  sys.puts('403 Forbidden: ' + path);\r\n};\r\n\r\nStaticServlet.prototype.sendRedirect_ = function(req, res, redirectUrl) {\r\n  res.writeHead(301, {\r\n      'Content-Type': 'text/html',\r\n      'Location': redirectUrl\r\n  });\r\n  res.write('<!doctype html>\\n');\r\n  res.write('<title>301 Moved Permanently</title>\\n');\r\n  res.write('<h1>Moved Permanently</h1>');\r\n  res.write(\r\n    '<p>The document has moved <a href=\"' +\r\n    redirectUrl +\r\n    '\">here</a>.</p>'\r\n  );\r\n  res.end();\r\n  sys.puts('301 Moved Permanently: ' + redirectUrl);\r\n};\r\n\r\nStaticServlet.prototype.sendFile_ = function(req, res, path) {\r\n  var self = this;\r\n  var file = fs.createReadStream(path);\r\n  res.writeHead(200, {\r\n    'Content-Type': StaticServlet.\r\n      MimeMap[path.split('.').pop()] || 'text/plain'\r\n  });\r\n  if (req.method === 'HEAD') {\r\n    res.end();\r\n  } else {\r\n    file.on('data', res.write.bind(res));\r\n    file.on('close', function() {\r\n      res.end();\r\n    });\r\n    file.on('error', function(error) {\r\n      self.sendError_(req, res, error);\r\n    });\r\n  }\r\n};\r\n\r\nStaticServlet.prototype.sendDirectory_ = function(req, res, path) {\r\n  var self = this;\r\n  if (path.match(/[^\\/]$/)) {\r\n    req.url.pathname += '/';\r\n    var redirectUrl = url.format(url.parse(url.format(req.url)));\r\n    return self.sendRedirect_(req, res, redirectUrl);\r\n  }\r\n  fs.readdir(path, function(err, files) {\r\n    if (err)\r\n      return self.sendError_(req, res, error);\r\n\r\n    if (!files.length)\r\n      return self.writeDirectoryIndex_(req, res, path, []);\r\n\r\n    var remaining = files.length;\r\n    files.forEach(function(fileName, index) {\r\n      fs.stat(path + '/' + fileName, function(err, stat) {\r\n        if (err)\r\n          return self.sendError_(req, res, err);\r\n        if (stat.isDirectory()) {\r\n          files[index] = fileName + '/';\r\n        }\r\n        if (!(--remaining))\r\n          return self.writeDirectoryIndex_(req, res, path, files);\r\n      });\r\n    });\r\n  });\r\n};\r\n\r\nStaticServlet.prototype.writeDirectoryIndex_ = function(req, res, path, files) {\r\n  path = path.substring(1);\r\n  res.writeHead(200, {\r\n    'Content-Type': 'text/html'\r\n  });\r\n  if (req.method === 'HEAD') {\r\n    res.end();\r\n    return;\r\n  }\r\n  res.write('<!doctype html>\\n');\r\n  res.write('<title>' + escapeHtml(path) + '</title>\\n');\r\n  res.write('<style>\\n');\r\n  res.write('  ol { list-style-type: none; font-size: 1.2em; }\\n');\r\n  res.write('</style>\\n');\r\n  res.write('<h1>Directory: ' + escapeHtml(path) + '</h1>');\r\n  res.write('<ol>');\r\n  files.forEach(function(fileName) {\r\n    if (fileName.charAt(0) !== '.') {\r\n      res.write('<li><a href=\"' +\r\n        escapeHtml(fileName) + '\">' +\r\n        escapeHtml(fileName) + '</a></li>');\r\n    }\r\n  });\r\n  res.write('</ol>');\r\n  res.end();\r\n};\r\n\r\n// Must be last,\r\nmain(process.argv);\r\n"]],"start1":0,"start2":0,"length1":0,"length2":6760}]],"length":6760}
